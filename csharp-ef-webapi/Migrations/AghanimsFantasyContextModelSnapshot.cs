// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using csharp_ef_webapi.Data;

#nullable disable

namespace csharp_ef_webapi.Migrations
{
    [DbContext(typeof(AghanimsFantasyContext))]
    partial class AghanimsFantasyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("nadcl")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SteamKit2.GC.Dota.Internal.CMsgDOTAMatch", b =>
                {
                    b.Property<decimal>("match_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("average_skill")
                        .HasColumnType("bigint");

                    b.Property<long>("cluster")
                        .HasColumnType("bigint");

                    b.Property<long>("dire_guild_id")
                        .HasColumnType("bigint");

                    b.Property<long>("dire_team_complete")
                        .HasColumnType("bigint");

                    b.Property<long>("dire_team_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("dire_team_logo")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("dire_team_logo_url")
                        .HasColumnType("text");

                    b.Property<string>("dire_team_name")
                        .HasColumnType("text");

                    b.Property<long>("dire_team_score")
                        .HasColumnType("bigint");

                    b.Property<string>("dire_team_tag")
                        .HasColumnType("text");

                    b.Property<long>("duration")
                        .HasColumnType("bigint");

                    b.Property<long>("engine")
                        .HasColumnType("bigint");

                    b.Property<long>("first_blood_time")
                        .HasColumnType("bigint");

                    b.Property<float>("game_balance")
                        .HasColumnType("real");

                    b.Property<int>("game_mode")
                        .HasColumnType("integer");

                    b.Property<long>("human_players")
                        .HasColumnType("bigint");

                    b.Property<long>("leagueid")
                        .HasColumnType("bigint");

                    b.Property<long>("lobby_type")
                        .HasColumnType("bigint");

                    b.Property<long>("match_flags")
                        .HasColumnType("bigint");

                    b.Property<int>("match_outcome")
                        .HasColumnType("integer");

                    b.Property<decimal>("match_seq_num")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("pre_game_duration")
                        .HasColumnType("bigint");

                    b.Property<long>("private_metadata_key")
                        .HasColumnType("bigint");

                    b.Property<long>("radiant_guild_id")
                        .HasColumnType("bigint");

                    b.Property<long>("radiant_team_complete")
                        .HasColumnType("bigint");

                    b.Property<long>("radiant_team_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("radiant_team_logo")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("radiant_team_logo_url")
                        .HasColumnType("text");

                    b.Property<string>("radiant_team_name")
                        .HasColumnType("text");

                    b.Property<long>("radiant_team_score")
                        .HasColumnType("bigint");

                    b.Property<string>("radiant_team_tag")
                        .HasColumnType("text");

                    b.Property<long>("replay_salt")
                        .HasColumnType("bigint");

                    b.Property<int>("replay_state")
                        .HasColumnType("integer");

                    b.Property<long>("series_id")
                        .HasColumnType("bigint");

                    b.Property<long>("series_type")
                        .HasColumnType("bigint");

                    b.Property<long>("server_ip")
                        .HasColumnType("bigint");

                    b.Property<long>("server_port")
                        .HasColumnType("bigint");

                    b.Property<long>("starttime")
                        .HasColumnType("bigint");

                    b.Property<long>("tournament_id")
                        .HasColumnType("bigint");

                    b.Property<long>("tournament_round")
                        .HasColumnType("bigint");

                    b.HasKey("match_id");

                    b.ToTable("dota_gc_match_details", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Discord.DiscordUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("discord_users", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyDraft", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("DiscordAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_account_id");

                    b.Property<DateTime?>("DraftCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("draft_created");

                    b.Property<DateTime?>("DraftLastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("draft_last_updated");

                    b.Property<int>("FantasyLeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy_league_id");

                    b.HasKey("Id");

                    b.HasIndex("FantasyLeagueId");

                    b.ToTable("dota_fantasy_drafts", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyDraftPlayer", b =>
                {
                    b.Property<long?>("FantasyPlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("fantasy_player_id");

                    b.Property<long>("FantasyDraftId")
                        .HasColumnType("bigint")
                        .HasColumnName("fantasy_draft_id");

                    b.Property<int>("DraftOrder")
                        .HasColumnType("integer")
                        .HasColumnName("draft_order");

                    b.HasKey("FantasyPlayerId", "FantasyDraftId");

                    b.HasIndex("FantasyDraftId");

                    b.ToTable("dota_fantasy_draft_players", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyLeague", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("FantasyDraftLocked")
                        .HasColumnType("bigint")
                        .HasColumnName("fantasy_draft_locked_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<long>("LeagueEndTime")
                        .HasColumnType("bigint")
                        .HasColumnName("league_end_time");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("league_id");

                    b.Property<long>("LeagueStartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("league_start_time");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("league_name");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("dota_fantasy_leagues", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyLeagueWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AegisSnatchedWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("aegis_snatched_weight");

                    b.Property<decimal>("AssistsWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("assists_weight");

                    b.Property<decimal>("CampsStackedWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("camps_stacked_weight");

                    b.Property<decimal>("CouriersKilledWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("couriers_killed_weight");

                    b.Property<decimal>("DeathsWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("deaths_weight");

                    b.Property<int>("FantasyLeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy_league_id");

                    b.Property<decimal>("FarmScoreWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("farm_score_weight");

                    b.Property<decimal>("FightScoreWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("fight_score_weight");

                    b.Property<decimal>("GoldPerMinWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("gold_per_min_weight");

                    b.Property<decimal>("GoldWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("gold_weight");

                    b.Property<decimal>("HeroDamageWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_damage_weight");

                    b.Property<decimal>("HeroHealingWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_healing_weight");

                    b.Property<decimal>("HeroXpWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_xp_weight");

                    b.Property<decimal>("KillsWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("kills_weight");

                    b.Property<decimal>("LastHitsWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("last_hits_weight");

                    b.Property<decimal>("NetworthRankWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("networth_rank_weight");

                    b.Property<decimal>("NetworthWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("networth_weight");

                    b.Property<decimal>("ObserverWardsPlacedWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("observer_wards_placed_weight");

                    b.Property<decimal>("PushScoreWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("push_score_weight");

                    b.Property<decimal>("RampagesWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("rampages_weight");

                    b.Property<decimal>("RapiersPurchasedWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("rapiers_purchased_weight");

                    b.Property<decimal>("ScaledHeroDamageWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("scaled_hero_damage_weight");

                    b.Property<decimal>("ScaledHeroHealingWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("scaled_hero_healing_weight");

                    b.Property<decimal>("ScaledTowerDamageWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("scaled_tower_damage_weight");

                    b.Property<decimal>("SentryWardsPlacedWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("sentry_wards_placed_weight");

                    b.Property<decimal>("StunDurationWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("stun_duration_weight");

                    b.Property<decimal>("SupportGoldSpentWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("support_gold_spent_weight");

                    b.Property<decimal>("SupportScoreWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("support_score_weight");

                    b.Property<decimal>("TowerDamageWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("tower_damage_weight");

                    b.Property<decimal>("TripleKillsWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("triple_kills_weight");

                    b.Property<decimal>("WardsDewardedWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("wards_dewarded_weight");

                    b.Property<decimal>("XpPerMinWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("xp_per_min_weight");

                    b.HasKey("Id");

                    b.HasIndex("FantasyLeagueId")
                        .IsUnique();

                    b.ToTable("dota_fantasy_league_weights", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyMatch", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MatchId"));

                    b.Property<int?>("DireScore")
                        .HasColumnType("integer")
                        .HasColumnName("dire_score");

                    b.Property<long?>("DireTeamId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int?>("FirstBloodTime")
                        .HasColumnType("integer")
                        .HasColumnName("first_blood_time");

                    b.Property<int?>("GameMode")
                        .HasColumnType("integer")
                        .HasColumnName("game_mode");

                    b.Property<bool>("GcMetadataParsed")
                        .HasColumnType("boolean")
                        .HasColumnName("gc_metadata_parsed");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("league_id");

                    b.Property<int>("LobbyType")
                        .HasColumnType("integer")
                        .HasColumnName("lobby_type");

                    b.Property<bool>("MatchDetailParsed")
                        .HasColumnType("boolean")
                        .HasColumnName("match_detail_parsed");

                    b.Property<bool>("MatchHistoryParsed")
                        .HasColumnType("boolean")
                        .HasColumnName("match_history_parsed");

                    b.Property<int?>("PreGameDuration")
                        .HasColumnType("integer")
                        .HasColumnName("pre_game_duration");

                    b.Property<int?>("RadiantScore")
                        .HasColumnType("integer")
                        .HasColumnName("radiant_score");

                    b.Property<long?>("RadiantTeamId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("RadiantWin")
                        .HasColumnType("boolean")
                        .HasColumnName("radiant_win");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("start_time");

                    b.HasKey("MatchId");

                    b.HasIndex("DireTeamId");

                    b.HasIndex("RadiantTeamId");

                    b.ToTable("fantasy_match", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyMatchPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AegisSnatched")
                        .HasColumnType("bigint")
                        .HasColumnName("aegis_snatched");

                    b.Property<int?>("Assists")
                        .HasColumnType("integer")
                        .HasColumnName("assists");

                    b.Property<int?>("CampsStacked")
                        .HasColumnType("integer")
                        .HasColumnName("camps_stacked");

                    b.Property<long?>("CouriersKilled")
                        .HasColumnType("bigint")
                        .HasColumnName("couriers_killed");

                    b.Property<int?>("Deaths")
                        .HasColumnType("integer")
                        .HasColumnName("deaths");

                    b.Property<int?>("Denies")
                        .HasColumnType("integer")
                        .HasColumnName("denies");

                    b.Property<int?>("Dewards")
                        .HasColumnType("integer")
                        .HasColumnName("dewards");

                    b.Property<bool>("DotaTeamSide")
                        .HasColumnType("boolean")
                        .HasColumnName("dota_team_side");

                    b.Property<float?>("FarmScore")
                        .HasColumnType("real")
                        .HasColumnName("farm_score");

                    b.Property<float?>("FightScore")
                        .HasColumnType("real")
                        .HasColumnName("fight_score");

                    b.Property<bool>("GcMetadataPlayerParsed")
                        .HasColumnType("boolean")
                        .HasColumnName("gc_metadata_player_parsed");

                    b.Property<int?>("Gold")
                        .HasColumnType("integer")
                        .HasColumnName("gold");

                    b.Property<int?>("GoldPerMin")
                        .HasColumnType("integer")
                        .HasColumnName("gold_per_min");

                    b.Property<int?>("HeroDamage")
                        .HasColumnType("integer")
                        .HasColumnName("hero_damage");

                    b.Property<int?>("HeroHealing")
                        .HasColumnType("integer")
                        .HasColumnName("hero_healing");

                    b.Property<long?>("HeroId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HeroXp")
                        .HasColumnType("bigint")
                        .HasColumnName("hero_xp");

                    b.Property<int?>("Kills")
                        .HasColumnType("integer")
                        .HasColumnName("kills");

                    b.Property<int?>("LastHits")
                        .HasColumnType("integer")
                        .HasColumnName("last_hits");

                    b.Property<int?>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<bool>("MatchDetailPlayerParsed")
                        .HasColumnType("boolean")
                        .HasColumnName("match_detail_player_parsed");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<long?>("Networth")
                        .HasColumnType("bigint")
                        .HasColumnName("net_worth");

                    b.Property<int?>("ObserverWardsPlaced")
                        .HasColumnType("integer")
                        .HasColumnName("observer_wards_placed");

                    b.Property<int>("PlayerSlot")
                        .HasColumnType("integer")
                        .HasColumnName("player_slot");

                    b.Property<float?>("PushScore")
                        .HasColumnType("real")
                        .HasColumnName("push_score");

                    b.Property<long?>("Rampages")
                        .HasColumnType("bigint")
                        .HasColumnName("rampages");

                    b.Property<long?>("RapiersPurchased")
                        .HasColumnType("bigint")
                        .HasColumnName("rapiers_purchased");

                    b.Property<int?>("SentyWardsPlaced")
                        .HasColumnType("integer")
                        .HasColumnName("sentry_wards_placed");

                    b.Property<float?>("StunDuration")
                        .HasColumnType("real")
                        .HasColumnName("stun_duration");

                    b.Property<int?>("SupportGoldSpent")
                        .HasColumnType("integer")
                        .HasColumnName("support_gold_spent");

                    b.Property<float?>("SupportScore")
                        .HasColumnType("real")
                        .HasColumnName("support_score");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TowerDamage")
                        .HasColumnType("integer")
                        .HasColumnName("tower_damage");

                    b.Property<long?>("TripleKills")
                        .HasColumnType("bigint")
                        .HasColumnName("triple_kills");

                    b.Property<int?>("XpPerMin")
                        .HasColumnType("integer")
                        .HasColumnName("xp_per_min");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("HeroId");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.ToTable("fantasy_match_player", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyNormalizedAveragesTable", b =>
                {
                    b.Property<long>("FantasyNormalizedAveragesTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("fantasy_normalized_averages_table_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FantasyNormalizedAveragesTableId"));

                    b.Property<decimal?>("AvgAegisSnatchedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("aegis_snatched_points");

                    b.Property<decimal?>("AvgAssistsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("assists_points");

                    b.Property<decimal?>("AvgCampsStackedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("camps_stacked_points");

                    b.Property<decimal?>("AvgCouriersKilledPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("couriers_killed_points");

                    b.Property<decimal?>("AvgDeathsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("deaths_points");

                    b.Property<float?>("AvgFarmScore")
                        .HasColumnType("real")
                        .HasColumnName("farm_score");

                    b.Property<float?>("AvgFightScore")
                        .HasColumnType("real")
                        .HasColumnName("fight_score");

                    b.Property<decimal?>("AvgGoldPerMinPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("gold_per_min_points");

                    b.Property<decimal?>("AvgGoldPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("gold_points");

                    b.Property<decimal?>("AvgHeroDamagePoints")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_damage_points");

                    b.Property<decimal?>("AvgHeroHealingPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_healing_points");

                    b.Property<decimal?>("AvgHeroXpPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_xp_points");

                    b.Property<decimal?>("AvgKillsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("kills_points");

                    b.Property<decimal?>("AvgLastHitsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("last_hits_points");

                    b.Property<decimal?>("AvgMatchFantasyPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("total_match_fantasy_points");

                    b.Property<decimal?>("AvgNetworthPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("networth_points");

                    b.Property<decimal?>("AvgObserverWardsPlacedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("observer_wards_placed_points");

                    b.Property<float?>("AvgPushScore")
                        .HasColumnType("real")
                        .HasColumnName("push_score");

                    b.Property<decimal?>("AvgRampagesPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("rampages_points");

                    b.Property<decimal?>("AvgRapiersPurchasedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("rapiers_purchased_points");

                    b.Property<decimal?>("AvgSentryWardsPlacedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("sentry_wards_placed_points");

                    b.Property<float?>("AvgStunDurationPoints")
                        .HasColumnType("real")
                        .HasColumnName("stun_duration_points");

                    b.Property<decimal?>("AvgSupportGoldSpentPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("support_gold_spent_points");

                    b.Property<float?>("AvgSupportScore")
                        .HasColumnType("real")
                        .HasColumnName("support_score");

                    b.Property<decimal?>("AvgTowerDamagePoints")
                        .HasColumnType("numeric")
                        .HasColumnName("tower_damage_points");

                    b.Property<decimal?>("AvgTripleKillsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("triple_kills_points");

                    b.Property<decimal?>("AvgWardsDewardedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("wards_dewarded_points");

                    b.Property<decimal?>("AvgXpPerMinPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("xp_per_min_points");

                    b.Property<long>("FantasyPlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("fantasy_player_id");

                    b.Property<decimal?>("TotalMatches")
                        .HasColumnType("numeric")
                        .HasColumnName("matches_played");

                    b.HasKey("FantasyNormalizedAveragesTableId");

                    b.HasIndex("FantasyPlayerId");

                    b.ToTable("dota_fantasy_normalized_averages", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DotaAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("dota_account_id");

                    b.Property<int>("FantasyLeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy_league_id");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("team_id");

                    b.Property<int>("TeamPosition")
                        .HasColumnType("integer")
                        .HasColumnName("team_position");

                    b.HasKey("Id");

                    b.HasIndex("DotaAccountId");

                    b.HasIndex("FantasyLeagueId");

                    b.HasIndex("TeamId");

                    b.ToTable("dota_fantasy_players", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyNormalizedAverages", b =>
                {
                    b.Property<decimal?>("AvgAegisSnatchedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("aegis_snatched_points");

                    b.Property<decimal?>("AvgAssistsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("assists_points");

                    b.Property<decimal?>("AvgCampsStackedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("camps_stacked_points");

                    b.Property<decimal?>("AvgCouriersKilledPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("couriers_killed_points");

                    b.Property<decimal?>("AvgDeathsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("deaths_points");

                    b.Property<float?>("AvgFarmScore")
                        .HasColumnType("real")
                        .HasColumnName("farm_score");

                    b.Property<float?>("AvgFightScore")
                        .HasColumnType("real")
                        .HasColumnName("fight_score");

                    b.Property<decimal?>("AvgGoldPerMinPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("gold_per_min_points");

                    b.Property<decimal?>("AvgGoldPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("gold_points");

                    b.Property<decimal?>("AvgHeroDamagePoints")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_damage_points");

                    b.Property<decimal?>("AvgHeroHealingPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_healing_points");

                    b.Property<decimal?>("AvgHeroXpPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_xp_points");

                    b.Property<decimal?>("AvgKillsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("kills_points");

                    b.Property<decimal?>("AvgLastHitsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("last_hits_points");

                    b.Property<decimal?>("AvgMatchFantasyPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("total_match_fantasy_points");

                    b.Property<decimal?>("AvgNetworthPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("networth_points");

                    b.Property<decimal?>("AvgObserverWardsPlacedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("observer_wards_placed_points");

                    b.Property<float?>("AvgPushScore")
                        .HasColumnType("real")
                        .HasColumnName("push_score");

                    b.Property<decimal?>("AvgRampagesPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("rampages_points");

                    b.Property<decimal?>("AvgRapiersPurchasedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("rapiers_purchased_points");

                    b.Property<decimal?>("AvgSentryWardsPlacedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("sentry_wards_placed_points");

                    b.Property<float?>("AvgStunDurationPoints")
                        .HasColumnType("real")
                        .HasColumnName("stun_duration_points");

                    b.Property<decimal?>("AvgSupportGoldSpentPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("support_gold_spent_points");

                    b.Property<float?>("AvgSupportScore")
                        .HasColumnType("real")
                        .HasColumnName("support_score");

                    b.Property<decimal?>("AvgTowerDamagePoints")
                        .HasColumnType("numeric")
                        .HasColumnName("tower_damage_points");

                    b.Property<decimal?>("AvgTripleKillsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("triple_kills_points");

                    b.Property<decimal?>("AvgWardsDewardedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("wards_dewarded_points");

                    b.Property<decimal?>("AvgXpPerMinPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("xp_per_min_points");

                    b.Property<long>("FantasyPlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("fantasy_player_id");

                    b.Property<decimal?>("TotalMatches")
                        .HasColumnType("numeric")
                        .HasColumnName("matches_played");

                    b.HasIndex("FantasyPlayerId");

                    b.ToTable((string)null);

                    b.ToView("fantasy_normalized_averages", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyPlayerPointTotals", b =>
                {
                    b.Property<double>("AvgGoldPerMin")
                        .HasColumnType("double precision")
                        .HasColumnName("gold_per_min");

                    b.Property<double>("AvgXpPerMin")
                        .HasColumnType("double precision")
                        .HasColumnName("xp_per_min");

                    b.Property<int>("FantasyLeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy_league_id");

                    b.Property<long>("FantasyPlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("fantasy_player_id");

                    b.Property<long>("TotalAegisSnatched")
                        .HasColumnType("bigint")
                        .HasColumnName("aegis_snatched");

                    b.Property<decimal>("TotalAegisSnatchedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("aegis_snatched_points");

                    b.Property<int>("TotalAssists")
                        .HasColumnType("integer")
                        .HasColumnName("assists");

                    b.Property<decimal>("TotalAssistsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("assists_points");

                    b.Property<long>("TotalCampsStacked")
                        .HasColumnType("bigint")
                        .HasColumnName("camps_stacked");

                    b.Property<decimal>("TotalCampsStackedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("camps_stacked_points");

                    b.Property<long>("TotalCouriersKilled")
                        .HasColumnType("bigint")
                        .HasColumnName("couriers_killed");

                    b.Property<decimal>("TotalCouriersKilledPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("couriers_killed_points");

                    b.Property<int>("TotalDeaths")
                        .HasColumnType("integer")
                        .HasColumnName("deaths");

                    b.Property<decimal>("TotalDeathsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("deaths_points");

                    b.Property<float>("TotalFarmScore")
                        .HasColumnType("real")
                        .HasColumnName("farm_score");

                    b.Property<float>("TotalFarmScorePoints")
                        .HasColumnType("real")
                        .HasColumnName("farm_score_points");

                    b.Property<float>("TotalFightScore")
                        .HasColumnType("real")
                        .HasColumnName("fight_score");

                    b.Property<float>("TotalFightScorePoints")
                        .HasColumnType("real")
                        .HasColumnName("fight_score_points");

                    b.Property<int>("TotalGold")
                        .HasColumnType("integer")
                        .HasColumnName("gold");

                    b.Property<decimal>("TotalGoldPerMinPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("gold_per_min_points");

                    b.Property<decimal>("TotalGoldPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("gold_points");

                    b.Property<int>("TotalHeroDamage")
                        .HasColumnType("integer")
                        .HasColumnName("hero_damage");

                    b.Property<decimal>("TotalHeroDamagePoints")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_damage_points");

                    b.Property<int>("TotalHeroHealing")
                        .HasColumnType("integer")
                        .HasColumnName("hero_healing");

                    b.Property<decimal>("TotalHeroHealingPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_healing_points");

                    b.Property<long>("TotalHeroXp")
                        .HasColumnType("bigint")
                        .HasColumnName("hero_xp");

                    b.Property<decimal>("TotalHeroXpPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_xp_points");

                    b.Property<int>("TotalKills")
                        .HasColumnType("integer")
                        .HasColumnName("kills");

                    b.Property<decimal>("TotalKillsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("kills_points");

                    b.Property<int>("TotalLastHits")
                        .HasColumnType("integer")
                        .HasColumnName("last_hits");

                    b.Property<decimal>("TotalLastHitsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("last_hits_points");

                    b.Property<decimal>("TotalMatchFantasyPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("total_match_fantasy_points");

                    b.Property<int>("TotalMatches")
                        .HasColumnType("integer")
                        .HasColumnName("matches");

                    b.Property<long>("TotalNetworth")
                        .HasColumnType("bigint")
                        .HasColumnName("networth");

                    b.Property<decimal>("TotalNetworthPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("networth_points");

                    b.Property<long>("TotalObserverWardsPlaced")
                        .HasColumnType("bigint")
                        .HasColumnName("observer_wards_placed");

                    b.Property<decimal>("TotalObserverWardsPlacedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("observer_wards_placed_points");

                    b.Property<float>("TotalPushScore")
                        .HasColumnType("real")
                        .HasColumnName("push_score");

                    b.Property<float>("TotalPushScorePoints")
                        .HasColumnType("real")
                        .HasColumnName("push_score_points");

                    b.Property<long>("TotalRampages")
                        .HasColumnType("bigint")
                        .HasColumnName("rampages");

                    b.Property<decimal>("TotalRampagesPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("rampages_points");

                    b.Property<long>("TotalRapiersPurchased")
                        .HasColumnType("bigint")
                        .HasColumnName("rapiers_purchased");

                    b.Property<decimal>("TotalRapiersPurchasedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("rapiers_purchased_points");

                    b.Property<long>("TotalSentryWardsPlaced")
                        .HasColumnType("bigint")
                        .HasColumnName("sentry_wards_placed");

                    b.Property<decimal>("TotalSentryWardsPlacedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("sentry_wards_placed_points");

                    b.Property<float>("TotalStunDuration")
                        .HasColumnType("real")
                        .HasColumnName("stun_duration");

                    b.Property<float>("TotalStunDurationPoints")
                        .HasColumnType("real")
                        .HasColumnName("stun_duration_points");

                    b.Property<long>("TotalSupportGoldSpent")
                        .HasColumnType("bigint")
                        .HasColumnName("support_gold_spent");

                    b.Property<decimal>("TotalSupportGoldSpentPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("support_gold_spent_points");

                    b.Property<float>("TotalSupportScore")
                        .HasColumnType("real")
                        .HasColumnName("support_score");

                    b.Property<float>("TotalSupportScorePoints")
                        .HasColumnType("real")
                        .HasColumnName("support_score_points");

                    b.Property<int>("TotalTowerDamage")
                        .HasColumnType("integer")
                        .HasColumnName("tower_damage");

                    b.Property<decimal>("TotalTowerDamagePoints")
                        .HasColumnType("numeric")
                        .HasColumnName("tower_damage_points");

                    b.Property<long>("TotalTripleKills")
                        .HasColumnType("bigint")
                        .HasColumnName("triple_kills");

                    b.Property<decimal>("TotalTripleKillsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("triple_kills_points");

                    b.Property<long>("TotalWardsDewarded")
                        .HasColumnType("bigint")
                        .HasColumnName("wards_dewarded");

                    b.Property<decimal>("TotalWardsDewardedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("wards_dewarded_points");

                    b.Property<decimal>("TotalXpPerMinPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("xp_per_min_points");

                    b.HasIndex("FantasyPlayerId");

                    b.ToTable((string)null);

                    b.ToView("fantasy_player_point_totals", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyPlayerPoints", b =>
                {
                    b.Property<long?>("AegisSnatched")
                        .HasColumnType("bigint")
                        .HasColumnName("aegis_snatched");

                    b.Property<decimal?>("AegisSnatchedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("aegis_snatched_points");

                    b.Property<int?>("Assists")
                        .HasColumnType("integer")
                        .HasColumnName("assists");

                    b.Property<decimal?>("AssistsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("assists_points");

                    b.Property<long?>("CampsStacked")
                        .HasColumnType("bigint")
                        .HasColumnName("camps_stacked");

                    b.Property<decimal?>("CampsStackedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("camps_stacked_points");

                    b.Property<long?>("CouriersKilled")
                        .HasColumnType("bigint")
                        .HasColumnName("couriers_killed");

                    b.Property<decimal?>("CouriersKilledPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("couriers_killed_points");

                    b.Property<int?>("Deaths")
                        .HasColumnType("integer")
                        .HasColumnName("deaths");

                    b.Property<decimal?>("DeathsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("deaths_points");

                    b.Property<int>("FantasyLeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy_league_id");

                    b.Property<long>("FantasyPlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("fantasy_player_id");

                    b.Property<float?>("FarmScore")
                        .HasColumnType("real")
                        .HasColumnName("farm_score");

                    b.Property<float?>("FarmScorePoints")
                        .HasColumnType("real")
                        .HasColumnName("farm_score_points");

                    b.Property<float?>("FightScore")
                        .HasColumnType("real")
                        .HasColumnName("fight_score");

                    b.Property<float?>("FightScorePoints")
                        .HasColumnType("real")
                        .HasColumnName("fight_score_points");

                    b.Property<int?>("Gold")
                        .HasColumnType("integer")
                        .HasColumnName("gold");

                    b.Property<int?>("GoldPerMin")
                        .HasColumnType("integer")
                        .HasColumnName("gold_per_min");

                    b.Property<decimal?>("GoldPerMinPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("gold_per_min_points");

                    b.Property<decimal?>("GoldPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("gold_points");

                    b.Property<int?>("HeroDamage")
                        .HasColumnType("integer")
                        .HasColumnName("hero_damage");

                    b.Property<decimal?>("HeroDamagePoints")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_damage_points");

                    b.Property<int?>("HeroHealing")
                        .HasColumnType("integer")
                        .HasColumnName("hero_healing");

                    b.Property<decimal?>("HeroHealingPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_healing_points");

                    b.Property<long?>("HeroXp")
                        .HasColumnType("bigint")
                        .HasColumnName("hero_xp");

                    b.Property<decimal?>("HeroXpPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("hero_xp_points");

                    b.Property<int?>("Kills")
                        .HasColumnType("integer")
                        .HasColumnName("kills");

                    b.Property<decimal?>("KillsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("kills_points");

                    b.Property<int?>("LastHits")
                        .HasColumnType("integer")
                        .HasColumnName("last_hits");

                    b.Property<decimal?>("LastHitsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("last_hits_points");

                    b.Property<int?>("MatchDetailsPlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("match_details_player_id");

                    b.Property<long?>("Networth")
                        .HasColumnType("bigint")
                        .HasColumnName("networth");

                    b.Property<decimal?>("NetworthPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("networth_points");

                    b.Property<long?>("ObserverWardsPlaced")
                        .HasColumnType("bigint")
                        .HasColumnName("observer_wards_placed");

                    b.Property<decimal?>("ObserverWardsPlacedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("observer_wards_placed_points");

                    b.Property<float?>("PushScore")
                        .HasColumnType("real")
                        .HasColumnName("push_score");

                    b.Property<float?>("PushScorePoints")
                        .HasColumnType("real")
                        .HasColumnName("push_score_points");

                    b.Property<long?>("Rampages")
                        .HasColumnType("bigint")
                        .HasColumnName("rampages");

                    b.Property<decimal?>("RampagesPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("rampages_points");

                    b.Property<long?>("RapiersPurchased")
                        .HasColumnType("bigint")
                        .HasColumnName("rapiers_purchased");

                    b.Property<decimal?>("RapiersPurchasedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("rapiers_purchased_points");

                    b.Property<long?>("SentryWardsPlaced")
                        .HasColumnType("bigint")
                        .HasColumnName("sentry_wards_placed");

                    b.Property<decimal?>("SentryWardsPlacedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("sentry_wards_placed_points");

                    b.Property<float?>("StunDuration")
                        .HasColumnType("real")
                        .HasColumnName("stun_duration");

                    b.Property<float?>("StunDurationPoints")
                        .HasColumnType("real")
                        .HasColumnName("stun_duration_points");

                    b.Property<long?>("SupportGoldSpent")
                        .HasColumnType("bigint")
                        .HasColumnName("support_gold_spent");

                    b.Property<decimal?>("SupportGoldSpentPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("support_gold_spent_points");

                    b.Property<float?>("SupportScore")
                        .HasColumnType("real")
                        .HasColumnName("support_score");

                    b.Property<float?>("SupportScorePoints")
                        .HasColumnType("real")
                        .HasColumnName("support_score_points");

                    b.Property<decimal?>("TotalMatchFantasyPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("total_match_fantasy_points");

                    b.Property<int?>("TowerDamage")
                        .HasColumnType("integer")
                        .HasColumnName("tower_damage");

                    b.Property<decimal?>("TowerDamagePoints")
                        .HasColumnType("numeric")
                        .HasColumnName("tower_damage_points");

                    b.Property<long?>("TripleKills")
                        .HasColumnType("bigint")
                        .HasColumnName("triple_kills");

                    b.Property<decimal?>("TripleKillsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("triple_kills_points");

                    b.Property<long?>("WardsDewarded")
                        .HasColumnType("bigint")
                        .HasColumnName("wards_dewarded");

                    b.Property<decimal?>("WardsDewardedPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("wards_dewarded_points");

                    b.Property<int?>("XpPerMin")
                        .HasColumnType("integer")
                        .HasColumnName("xp_per_min");

                    b.Property<decimal?>("XpPerMinPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("xp_per_min_points");

                    b.HasIndex("FantasyPlayerId");

                    b.HasIndex("MatchDetailsPlayerId");

                    b.ToTable((string)null);

                    b.ToView("fantasy_player_points", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadata", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<decimal>("LobbyId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("lobby_id");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<long>("PrimaryEventId")
                        .HasColumnType("bigint")
                        .HasColumnName("primary_event_id");

                    b.Property<decimal>("ReportUntilTime")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("report_until_time");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("dota_gc_match_metadata", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataItemPurchase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("GcMatchMetadataPlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long>("PurchaseTime")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_time");

                    b.HasKey("Id");

                    b.HasIndex("GcMatchMetadataPlayerId");

                    b.ToTable("dota_gc_match_metadata_itempurchase", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<List<int>>("AbilityUpgrades")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<long>("AegisSnatched")
                        .HasColumnType("bigint")
                        .HasColumnName("aegis_snatched");

                    b.Property<long>("AvgAssistsX16")
                        .HasColumnType("bigint")
                        .HasColumnName("avg_assists_x16");

                    b.Property<long>("AvgDeathsX16")
                        .HasColumnType("bigint")
                        .HasColumnName("avg_deaths_x16");

                    b.Property<long>("AvgGpmX16")
                        .HasColumnType("bigint")
                        .HasColumnName("avg_gpm_x16");

                    b.Property<long>("AvgKillsX16")
                        .HasColumnType("bigint")
                        .HasColumnName("avg_kills_x16");

                    b.Property<bool>("AvgStatsCalibrated")
                        .HasColumnType("boolean")
                        .HasColumnName("avg_stats_calibrated");

                    b.Property<long>("AvgXpmX16")
                        .HasColumnType("bigint")
                        .HasColumnName("avg_xpm_x16");

                    b.Property<long>("BestAssistsX16")
                        .HasColumnType("bigint")
                        .HasColumnName("best_assists_x16");

                    b.Property<long>("BestGpmX16")
                        .HasColumnType("bigint")
                        .HasColumnName("best_gpm_x16");

                    b.Property<long>("BestKillsX16")
                        .HasColumnType("bigint")
                        .HasColumnName("best_kills_x16");

                    b.Property<long>("BestWinStreak")
                        .HasColumnType("bigint")
                        .HasColumnName("best_win_streak");

                    b.Property<long>("BestXpmX16")
                        .HasColumnType("bigint")
                        .HasColumnName("best_xpm_x16");

                    b.Property<long>("CampsStacked")
                        .HasColumnType("bigint")
                        .HasColumnName("camps_stacked");

                    b.Property<long>("CouriersKilled")
                        .HasColumnType("bigint")
                        .HasColumnName("couriers_killed");

                    b.Property<float>("FarmScore")
                        .HasColumnType("real")
                        .HasColumnName("farm_score");

                    b.Property<long>("FeaturedHeroStickerIndex")
                        .HasColumnType("bigint")
                        .HasColumnName("featured_hero_sticker_index");

                    b.Property<long>("FeaturedHeroStickerQuality")
                        .HasColumnType("bigint")
                        .HasColumnName("featured_hero_sticker_quality");

                    b.Property<float>("FightScore")
                        .HasColumnType("real")
                        .HasColumnName("fight_score");

                    b.Property<int>("GamePlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("game_player_id");

                    b.Property<long?>("GcMatchMetadataTeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("HeroXp")
                        .HasColumnType("bigint")
                        .HasColumnName("hero_xp");

                    b.Property<long>("LaneSelectionFlags")
                        .HasColumnType("bigint")
                        .HasColumnName("lane_selection_flags");

                    b.Property<long>("NetworthRank")
                        .HasColumnType("bigint")
                        .HasColumnName("net_worth_rank");

                    b.Property<long>("ObserverWardsPlaced")
                        .HasColumnType("bigint")
                        .HasColumnName("observer_wards_placed");

                    b.Property<long>("PlayerSlot")
                        .HasColumnType("bigint")
                        .HasColumnName("player_slot");

                    b.Property<float>("PushScore")
                        .HasColumnType("real")
                        .HasColumnName("push_score");

                    b.Property<long>("Rampages")
                        .HasColumnType("bigint")
                        .HasColumnName("rampages");

                    b.Property<long>("RapiersPurchased")
                        .HasColumnType("bigint")
                        .HasColumnName("rapiers_purchased");

                    b.Property<long>("SentryWardsPlaced")
                        .HasColumnType("bigint")
                        .HasColumnName("sentry_wards_placed");

                    b.Property<float>("StunDuration")
                        .HasColumnType("real")
                        .HasColumnName("stun_duration");

                    b.Property<long>("SupportGoldSpent")
                        .HasColumnType("bigint")
                        .HasColumnName("support_gold_spent");

                    b.Property<float>("SupportScore")
                        .HasColumnType("real")
                        .HasColumnName("support_score");

                    b.Property<long>("TeamSlot")
                        .HasColumnType("bigint")
                        .HasColumnName("team_slot");

                    b.Property<long>("TripleKills")
                        .HasColumnType("bigint")
                        .HasColumnName("triple_kills");

                    b.Property<long>("WardsDewarded")
                        .HasColumnType("bigint")
                        .HasColumnName("wards_dewarded");

                    b.Property<long>("WinStreak")
                        .HasColumnType("bigint")
                        .HasColumnName("win_streak");

                    b.HasKey("Id");

                    b.HasIndex("GcMatchMetadataTeamId");

                    b.ToTable("dota_gc_match_metadata_player", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataPlayerKill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<long?>("GcMatchMetadataPlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("VictimSlot")
                        .HasColumnType("bigint")
                        .HasColumnName("victim_slot");

                    b.HasKey("Id");

                    b.HasIndex("GcMatchMetadataPlayerId");

                    b.ToTable("dota_gc_match_metadata_playerkill", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CmCaptainPlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("cm_captain_player_id");

                    b.Property<bool>("CmFirstPick")
                        .HasColumnType("boolean")
                        .HasColumnName("cm_first_pick");

                    b.Property<long>("CmPenalty")
                        .HasColumnType("bigint")
                        .HasColumnName("cm_penalty");

                    b.Property<long>("DotaTeam")
                        .HasColumnType("bigint")
                        .HasColumnName("dota_team");

                    b.Property<long?>("GcMatchMetadataId")
                        .HasColumnType("bigint");

                    b.Property<List<float>>("GraphExperience")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<List<float>>("GraphGoldEarned")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<List<float>>("GraphNetworth")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.HasKey("Id");

                    b.HasIndex("GcMatchMetadataId");

                    b.ToTable("dota_gc_match_metadata_team", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataTip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("GcMatchMetadataId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourcePlayerSlot")
                        .HasColumnType("bigint")
                        .HasColumnName("source_player_slot");

                    b.Property<long>("TargetPlayerSlot")
                        .HasColumnType("bigint")
                        .HasColumnName("target_player_slot");

                    b.Property<long>("TipAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("tip_amount");

                    b.HasKey("Id");

                    b.HasIndex("GcMatchMetadataId");

                    b.ToTable("dota_gc_match_metadata_tip", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchHighlights", b =>
                {
                    b.Property<int?>("Assists")
                        .HasColumnType("integer")
                        .HasColumnName("assists");

                    b.Property<decimal?>("AssistsDiff")
                        .HasColumnType("numeric")
                        .HasColumnName("assists_diff");

                    b.Property<decimal?>("AssistsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("assists_points");

                    b.Property<bool>("AssistsPointsDeviation")
                        .HasColumnType("boolean")
                        .HasColumnName("assists_points_deviation");

                    b.Property<int?>("Deaths")
                        .HasColumnType("integer")
                        .HasColumnName("deaths");

                    b.Property<decimal?>("DeathsDiff")
                        .HasColumnType("numeric")
                        .HasColumnName("deaths_diff");

                    b.Property<decimal?>("DeathsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("deaths_points");

                    b.Property<bool>("DeathsPointsDeviation")
                        .HasColumnType("boolean")
                        .HasColumnName("deaths_points_deviation");

                    b.Property<int>("FantasyLeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy_league_id");

                    b.Property<long>("FantasyPlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("fantasy_player_id");

                    b.Property<int?>("GoldPerMin")
                        .HasColumnType("integer")
                        .HasColumnName("gold_per_min");

                    b.Property<decimal?>("GoldPerMinDiff")
                        .HasColumnType("numeric")
                        .HasColumnName("gold_per_min_diff");

                    b.Property<decimal?>("GoldPerMinPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("gold_per_min_points");

                    b.Property<bool>("GoldPerMinPointsDeviation")
                        .HasColumnType("boolean")
                        .HasColumnName("gold_per_min_deviation");

                    b.Property<int?>("Kills")
                        .HasColumnType("integer")
                        .HasColumnName("kills");

                    b.Property<decimal?>("KillsDiff")
                        .HasColumnType("numeric")
                        .HasColumnName("kills_diff");

                    b.Property<decimal?>("KillsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("kills_points");

                    b.Property<bool>("KillsPointsDeviation")
                        .HasColumnType("boolean")
                        .HasColumnName("kills_points_deviation");

                    b.Property<int?>("LastHits")
                        .HasColumnType("integer")
                        .HasColumnName("last_hits");

                    b.Property<decimal?>("LastHitsDiff")
                        .HasColumnType("numeric")
                        .HasColumnName("last_hits_diff");

                    b.Property<decimal?>("LastHitsPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("last_hits_points");

                    b.Property<bool>("LastHitsPointsDeviation")
                        .HasColumnType("boolean")
                        .HasColumnName("last_hits_points_deviation");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("start_time");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<decimal?>("TotalMatchFantasyPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("total_match_fantasy_points");

                    b.Property<int?>("XpPerMin")
                        .HasColumnType("integer")
                        .HasColumnName("xp_per_min");

                    b.Property<decimal?>("XpPerMinDiff")
                        .HasColumnType("numeric")
                        .HasColumnName("xp_per_min_diff");

                    b.Property<decimal?>("XpPerMinPoints")
                        .HasColumnType("numeric")
                        .HasColumnName("xp_per_min_points");

                    b.Property<bool>("XpPerMinPointsDeviation")
                        .HasColumnType("boolean")
                        .HasColumnName("xp_per_min_deviation");

                    b.HasIndex("FantasyPlayerId");

                    b.ToTable((string)null);

                    b.ToView("match_highlights", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.ProMetadata.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SteamProfilePicture")
                        .HasColumnType("text")
                        .HasColumnName("steam_profile_picture");

                    b.HasKey("Id");

                    b.ToTable("dota_accounts", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.ProMetadata.Hero", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("dota_heroes", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.ProMetadata.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("league_name");

                    b.HasKey("Id");

                    b.ToTable("dota_leagues", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.ProMetadata.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text")
                        .HasColumnName("abbreviation");

                    b.Property<long>("AdminAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("admin_account_id");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("games_played");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("LogoSponsor")
                        .HasColumnType("text")
                        .HasColumnName("logo_sponsor");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Player0AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_0_account_id");

                    b.Property<long>("Player1AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_1_account_id");

                    b.Property<long>("Player2AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_2_account_id");

                    b.Property<long>("Player3AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_3_account_id");

                    b.Property<long>("Player4AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_4_account_id");

                    b.Property<long>("Player5AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_5_account_id");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("bigint")
                        .HasColumnName("time_created");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("dota_teams", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchDetail", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MatchId"));

                    b.Property<int>("BarracksStatusDire")
                        .HasColumnType("integer")
                        .HasColumnName("barracks_status_dire");

                    b.Property<int>("BarracksStatusRadiant")
                        .HasColumnType("integer")
                        .HasColumnName("barracks_status_radiant");

                    b.Property<int>("Cluster")
                        .HasColumnType("integer")
                        .HasColumnName("cluster");

                    b.Property<int>("DireScore")
                        .HasColumnType("integer")
                        .HasColumnName("dire_score");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int>("Engine")
                        .HasColumnType("integer")
                        .HasColumnName("engine");

                    b.Property<int>("FirstBloodTime")
                        .HasColumnType("integer")
                        .HasColumnName("first_blood_time");

                    b.Property<int>("Flags")
                        .HasColumnType("integer")
                        .HasColumnName("flags");

                    b.Property<int>("GameMode")
                        .HasColumnType("integer")
                        .HasColumnName("game_mode");

                    b.Property<int>("HumanPlayers")
                        .HasColumnType("integer")
                        .HasColumnName("human_players");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("league_id");

                    b.Property<int>("LobbyType")
                        .HasColumnType("integer")
                        .HasColumnName("lobby_type");

                    b.Property<long>("MatchSeqNum")
                        .HasColumnType("bigint")
                        .HasColumnName("match_seq_num");

                    b.Property<int>("PreGameDuration")
                        .HasColumnType("integer")
                        .HasColumnName("pre_game_duration");

                    b.Property<int>("RadiantScore")
                        .HasColumnType("integer")
                        .HasColumnName("radiant_score");

                    b.Property<bool>("RadiantWin")
                        .HasColumnType("boolean")
                        .HasColumnName("radiant_win");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("start_time");

                    b.Property<int>("TowerStatusDire")
                        .HasColumnType("integer")
                        .HasColumnName("tower_status_dire");

                    b.Property<int>("TowerStatusRadiant")
                        .HasColumnType("integer")
                        .HasColumnName("tower_status_radiant");

                    b.HasKey("MatchId");

                    b.HasIndex("LeagueId");

                    b.ToTable("dota_match_details", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchDetailsPicksBans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HeroId")
                        .HasColumnType("integer")
                        .HasColumnName("hero_id");

                    b.Property<bool>("IsPick")
                        .HasColumnType("boolean")
                        .HasColumnName("is_pick");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("Team")
                        .HasColumnType("integer")
                        .HasColumnName("team");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("dota_match_details_picks_bans", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchDetailsPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<int?>("AghanimsScepter")
                        .HasColumnType("integer")
                        .HasColumnName("aghanims_scepter");

                    b.Property<int?>("AghanimsShard")
                        .HasColumnType("integer")
                        .HasColumnName("aghanims_shard");

                    b.Property<int?>("Assists")
                        .HasColumnType("integer")
                        .HasColumnName("assists");

                    b.Property<int?>("Backpack0")
                        .HasColumnType("integer")
                        .HasColumnName("backpack_0");

                    b.Property<int?>("Backpack1")
                        .HasColumnType("integer")
                        .HasColumnName("backpack_1");

                    b.Property<int?>("Backpack2")
                        .HasColumnType("integer")
                        .HasColumnName("backpack_2");

                    b.Property<int?>("Deaths")
                        .HasColumnType("integer")
                        .HasColumnName("deaths");

                    b.Property<int?>("Denies")
                        .HasColumnType("integer")
                        .HasColumnName("denies");

                    b.Property<int?>("Gold")
                        .HasColumnType("integer")
                        .HasColumnName("gold");

                    b.Property<int?>("GoldPerMin")
                        .HasColumnType("integer")
                        .HasColumnName("gold_per_min");

                    b.Property<int?>("GoldSpent")
                        .HasColumnType("integer")
                        .HasColumnName("gold_spent");

                    b.Property<int?>("HeroDamage")
                        .HasColumnType("integer")
                        .HasColumnName("hero_damage");

                    b.Property<int?>("HeroHealing")
                        .HasColumnType("integer")
                        .HasColumnName("hero_healing");

                    b.Property<int>("HeroId")
                        .HasColumnType("integer")
                        .HasColumnName("hero_id");

                    b.Property<int?>("Item0")
                        .HasColumnType("integer")
                        .HasColumnName("item_0");

                    b.Property<int?>("Item1")
                        .HasColumnType("integer")
                        .HasColumnName("item_1");

                    b.Property<int?>("Item2")
                        .HasColumnType("integer")
                        .HasColumnName("item_2");

                    b.Property<int?>("Item3")
                        .HasColumnType("integer")
                        .HasColumnName("item_3");

                    b.Property<int?>("Item4")
                        .HasColumnType("integer")
                        .HasColumnName("item_4");

                    b.Property<int?>("Item5")
                        .HasColumnType("integer")
                        .HasColumnName("item_5");

                    b.Property<int?>("ItemNeutral")
                        .HasColumnType("integer")
                        .HasColumnName("item_neutral");

                    b.Property<int?>("Kills")
                        .HasColumnType("integer")
                        .HasColumnName("kills");

                    b.Property<int?>("LastHits")
                        .HasColumnType("integer")
                        .HasColumnName("last_hits");

                    b.Property<int?>("LeaverStatus")
                        .HasColumnType("integer")
                        .HasColumnName("leaver_status");

                    b.Property<int?>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<int?>("Moonshard")
                        .HasColumnType("integer")
                        .HasColumnName("moonshard");

                    b.Property<long?>("Networth")
                        .HasColumnType("bigint")
                        .HasColumnName("net_worth");

                    b.Property<int>("PlayerSlot")
                        .HasColumnType("integer")
                        .HasColumnName("player_slot");

                    b.Property<int?>("ScaledHeroDamage")
                        .HasColumnType("integer")
                        .HasColumnName("scaled_hero_damage");

                    b.Property<int?>("ScaledHeroHealing")
                        .HasColumnType("integer")
                        .HasColumnName("scaled_hero_healing");

                    b.Property<int?>("ScaledTowerDamage")
                        .HasColumnType("integer")
                        .HasColumnName("scaled_tower_damage");

                    b.Property<int?>("TeamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("team_number");

                    b.Property<int?>("TeamSlot")
                        .HasColumnType("integer")
                        .HasColumnName("team_slot");

                    b.Property<int?>("TowerDamage")
                        .HasColumnType("integer")
                        .HasColumnName("tower_damage");

                    b.Property<int?>("XpPerMin")
                        .HasColumnType("integer")
                        .HasColumnName("xp_per_min");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("dota_match_details_players", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchDetailsPlayersAbilityUpgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Ability")
                        .HasColumnType("integer")
                        .HasColumnName("ability");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<int>("Time")
                        .HasColumnType("integer")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("dota_match_details_players_ability_upgrades", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchHistory", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MatchId"));

                    b.Property<long>("DireTeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("dire_team_id");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("league_id");

                    b.Property<int>("LobbyType")
                        .HasColumnType("integer")
                        .HasColumnName("lobby_type");

                    b.Property<long>("MatchSeqNum")
                        .HasColumnType("bigint")
                        .HasColumnName("match_seq_num");

                    b.Property<long>("RadiantTeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("radiant_team_id");

                    b.Property<int>("SeriesId")
                        .HasColumnType("integer")
                        .HasColumnName("series_id");

                    b.Property<int>("SeriesType")
                        .HasColumnType("integer")
                        .HasColumnName("series_type");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("start_time");

                    b.HasKey("MatchId");

                    b.HasIndex("LeagueId");

                    b.ToTable("dota_match_history", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchHistoryPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<int>("HeroId")
                        .HasColumnType("integer")
                        .HasColumnName("hero_id");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<int>("PlayerSlot")
                        .HasColumnType("integer")
                        .HasColumnName("player_slot");

                    b.Property<int>("TeamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("team_number");

                    b.Property<int>("TeamSlot")
                        .HasColumnType("integer")
                        .HasColumnName("team_slot");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("dota_match_history_players", "nadcl");
                });

            modelBuilder.Entity("SteamKit2.GC.Dota.Internal.CMsgDOTAMatch", b =>
                {
                    b.OwnsMany("SteamKit2.GC.Dota.Internal.CMsgDOTAMatch.players#SteamKit2.GC.Dota.Internal.CMsgDOTAMatch+Player", "players", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<decimal>("MatchId")
                                .HasColumnType("numeric(20,0)");

                            b1.Property<long>("account_id")
                                .HasColumnType("bigint");

                            b1.Property<bool>("active_plus_subscription")
                                .HasColumnType("boolean");

                            b1.Property<long>("assists")
                                .HasColumnType("bigint");

                            b1.Property<long>("bot_difficulty")
                                .HasColumnType("bigint");

                            b1.Property<long>("bounty_runes")
                                .HasColumnType("bigint");

                            b1.Property<long>("claimed_denies")
                                .HasColumnType("bigint");

                            b1.Property<long>("claimed_farm_gold")
                                .HasColumnType("bigint");

                            b1.Property<long>("claimed_misses")
                                .HasColumnType("bigint");

                            b1.Property<long>("deaths")
                                .HasColumnType("bigint");

                            b1.Property<long>("denies")
                                .HasColumnType("bigint");

                            b1.Property<float>("expected_team_contribution")
                                .HasColumnType("real");

                            b1.Property<bool>("feeding_detected")
                                .HasColumnType("boolean");

                            b1.Property<long>("gold")
                                .HasColumnType("bigint");

                            b1.Property<long>("gold_lost_to_death")
                                .HasColumnType("bigint");

                            b1.Property<long>("gold_per_min")
                                .HasColumnType("bigint");

                            b1.Property<long>("gold_spent")
                                .HasColumnType("bigint");

                            b1.Property<long>("hero_damage")
                                .HasColumnType("bigint");

                            b1.Property<long>("hero_healing")
                                .HasColumnType("bigint");

                            b1.Property<long>("hero_id")
                                .HasColumnType("bigint");

                            b1.Property<long>("hero_pick_order")
                                .HasColumnType("bigint");

                            b1.Property<long>("hero_play_count")
                                .HasColumnType("bigint");

                            b1.Property<bool>("hero_was_dota_plus_suggestion")
                                .HasColumnType("boolean");

                            b1.Property<bool>("hero_was_randomed")
                                .HasColumnType("boolean");

                            b1.Property<int>("item_0")
                                .HasColumnType("integer");

                            b1.Property<int>("item_1")
                                .HasColumnType("integer");

                            b1.Property<int>("item_2")
                                .HasColumnType("integer");

                            b1.Property<int>("item_3")
                                .HasColumnType("integer");

                            b1.Property<int>("item_4")
                                .HasColumnType("integer");

                            b1.Property<int>("item_5")
                                .HasColumnType("integer");

                            b1.Property<int>("item_6")
                                .HasColumnType("integer");

                            b1.Property<int>("item_7")
                                .HasColumnType("integer");

                            b1.Property<int>("item_8")
                                .HasColumnType("integer");

                            b1.Property<int>("item_9")
                                .HasColumnType("integer");

                            b1.Property<long>("kills")
                                .HasColumnType("bigint");

                            b1.Property<long>("lane_selection_flags")
                                .HasColumnType("bigint");

                            b1.Property<long>("last_hits")
                                .HasColumnType("bigint");

                            b1.Property<long>("leaver_status")
                                .HasColumnType("bigint");

                            b1.Property<long>("level")
                                .HasColumnType("bigint");

                            b1.Property<long>("misses")
                                .HasColumnType("bigint");

                            b1.Property<long>("mmr_type")
                                .HasColumnType("bigint");

                            b1.Property<long>("net_worth")
                                .HasColumnType("bigint");

                            b1.Property<long>("outposts_captured")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("party_id")
                                .HasColumnType("numeric(20,0)");

                            b1.Property<string>("player_name")
                                .HasColumnType("text");

                            b1.Property<long>("player_slot")
                                .HasColumnType("bigint");

                            b1.Property<long>("previous_rank")
                                .HasColumnType("bigint");

                            b1.Property<string>("pro_name")
                                .HasColumnType("text");

                            b1.Property<int>("rank_change")
                                .HasColumnType("integer");

                            b1.Property<int>("rank_uncertainty_change")
                                .HasColumnType("integer");

                            b1.Property<string>("real_name")
                                .HasColumnType("text");

                            b1.Property<float>("scaled_assists")
                                .HasColumnType("real");

                            b1.Property<float>("scaled_deaths")
                                .HasColumnType("real");

                            b1.Property<long>("scaled_hero_damage")
                                .HasColumnType("bigint");

                            b1.Property<long>("scaled_hero_healing")
                                .HasColumnType("bigint");

                            b1.Property<float>("scaled_kills")
                                .HasColumnType("real");

                            b1.Property<float>("scaled_metric")
                                .HasColumnType("real");

                            b1.Property<long>("scaled_tower_damage")
                                .HasColumnType("bigint");

                            b1.Property<long>("search_rank")
                                .HasColumnType("bigint");

                            b1.Property<long>("search_rank_uncertainty")
                                .HasColumnType("bigint");

                            b1.Property<long>("seconds_dead")
                                .HasColumnType("bigint");

                            b1.Property<long>("support_ability_value")
                                .HasColumnType("bigint");

                            b1.Property<long>("support_gold")
                                .HasColumnType("bigint");

                            b1.Property<int>("team_number")
                                .HasColumnType("integer");

                            b1.Property<long>("team_slot")
                                .HasColumnType("bigint");

                            b1.Property<long>("time_last_seen")
                                .HasColumnType("bigint");

                            b1.Property<long>("tower_damage")
                                .HasColumnType("bigint");

                            b1.Property<long>("xp_per_min")
                                .HasColumnType("bigint");

                            b1.HasKey("Id");

                            b1.HasIndex("MatchId");

                            b1.ToTable("dota_gc_match_detail_players", "nadcl");

                            b1.WithOwner()
                                .HasForeignKey("MatchId");

                            b1.OwnsMany("SteamKit2.GC.Dota.Internal.CMsgDOTAMatch.players#SteamKit2.GC.Dota.Internal.CMsgDOTAMatch+Player.hero_damage_dealt#SteamKit2.GC.Dota.Internal.CMsgDOTAMatch+Player+HeroDamageReceived", "hero_damage_dealt", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("MatchPlayerId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("damage_type")
                                        .HasColumnType("integer");

                                    b2.Property<long>("post_reduction")
                                        .HasColumnType("bigint");

                                    b2.Property<long>("pre_reduction")
                                        .HasColumnType("bigint");

                                    b2.HasKey("Id");

                                    b2.HasIndex("MatchPlayerId");

                                    b2.ToTable("dota_gc_match_detail_player_damage_dealt", "nadcl");

                                    b2.WithOwner()
                                        .HasForeignKey("MatchPlayerId");
                                });

                            b1.OwnsMany("SteamKit2.GC.Dota.Internal.CMsgDOTAMatch.players#SteamKit2.GC.Dota.Internal.CMsgDOTAMatch+Player.hero_damage_received#SteamKit2.GC.Dota.Internal.CMsgDOTAMatch+Player+HeroDamageReceived", "hero_damage_received", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("MatchPlayerId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("damage_type")
                                        .HasColumnType("integer");

                                    b2.Property<long>("post_reduction")
                                        .HasColumnType("bigint");

                                    b2.Property<long>("pre_reduction")
                                        .HasColumnType("bigint");

                                    b2.HasKey("Id");

                                    b2.HasIndex("MatchPlayerId");

                                    b2.ToTable("dota_gc_match_detail_player_damage_received", "nadcl");

                                    b2.WithOwner()
                                        .HasForeignKey("MatchPlayerId");
                                });

                            b1.Navigation("hero_damage_dealt");

                            b1.Navigation("hero_damage_received");
                        });

                    b.Navigation("players");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyDraft", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.Fantasy.FantasyLeague", null)
                        .WithMany("FantasyDrafts")
                        .HasForeignKey("FantasyLeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyDraftPlayer", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.Fantasy.FantasyDraft", null)
                        .WithMany("DraftPickPlayers")
                        .HasForeignKey("FantasyDraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("csharp_ef_webapi.Models.Fantasy.FantasyPlayer", "FantasyPlayer")
                        .WithMany()
                        .HasForeignKey("FantasyPlayerId")
                        .IsRequired();

                    b.Navigation("FantasyPlayer");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyLeague", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.ProMetadata.League", null)
                        .WithMany("FantasyLeagues")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyLeagueWeight", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.Fantasy.FantasyLeague", null)
                        .WithOne("FantasyLeagueWeight")
                        .HasForeignKey("csharp_ef_webapi.Models.Fantasy.FantasyLeagueWeight", "FantasyLeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyMatch", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.ProMetadata.Team", "DireTeam")
                        .WithMany()
                        .HasForeignKey("DireTeamId");

                    b.HasOne("csharp_ef_webapi.Models.ProMetadata.Team", "RadiantTeam")
                        .WithMany()
                        .HasForeignKey("RadiantTeamId");

                    b.Navigation("DireTeam");

                    b.Navigation("RadiantTeam");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyMatchPlayer", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.ProMetadata.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("csharp_ef_webapi.Models.ProMetadata.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroId");

                    b.HasOne("csharp_ef_webapi.Models.Fantasy.FantasyMatch", null)
                        .WithMany("Players")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("csharp_ef_webapi.Models.ProMetadata.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Account");

                    b.Navigation("Hero");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyNormalizedAveragesTable", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.Fantasy.FantasyPlayer", "FantasyPlayer")
                        .WithMany()
                        .HasForeignKey("FantasyPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FantasyPlayer");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyPlayer", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.ProMetadata.Account", "DotaAccount")
                        .WithMany()
                        .HasForeignKey("DotaAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("csharp_ef_webapi.Models.Fantasy.FantasyLeague", null)
                        .WithMany("FantasyPlayers")
                        .HasForeignKey("FantasyLeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("csharp_ef_webapi.Models.ProMetadata.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("DotaAccount");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyNormalizedAverages", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.Fantasy.FantasyPlayer", "FantasyPlayer")
                        .WithMany()
                        .HasForeignKey("FantasyPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FantasyPlayer");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyPlayerPointTotals", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.Fantasy.FantasyPlayer", "FantasyPlayer")
                        .WithMany()
                        .HasForeignKey("FantasyPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FantasyPlayer");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyPlayerPoints", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.Fantasy.FantasyPlayer", "FantasyPlayer")
                        .WithMany()
                        .HasForeignKey("FantasyPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("csharp_ef_webapi.Models.WebApi.MatchDetailsPlayer", "Match")
                        .WithMany()
                        .HasForeignKey("MatchDetailsPlayerId");

                    b.Navigation("FantasyPlayer");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadata", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.ProMetadata.League", null)
                        .WithMany("MatchMetadatas")
                        .HasForeignKey("LeagueId");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataItemPurchase", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataPlayer", null)
                        .WithMany("Items")
                        .HasForeignKey("GcMatchMetadataPlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataPlayer", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataTeam", null)
                        .WithMany("Players")
                        .HasForeignKey("GcMatchMetadataTeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataPlayerKill", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataPlayer", null)
                        .WithMany("Kills")
                        .HasForeignKey("GcMatchMetadataPlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataTeam", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadata", null)
                        .WithMany("Teams")
                        .HasForeignKey("GcMatchMetadataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataTip", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadata", null)
                        .WithMany("MatchTips")
                        .HasForeignKey("GcMatchMetadataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchHighlights", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.Fantasy.FantasyPlayer", "FantasyPlayer")
                        .WithMany()
                        .HasForeignKey("FantasyPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FantasyPlayer");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchDetail", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.ProMetadata.League", "League")
                        .WithMany("MatchDetails")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchDetailsPicksBans", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.WebApi.MatchDetail", null)
                        .WithMany("PicksBans")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchDetailsPlayer", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.WebApi.MatchDetail", null)
                        .WithMany("Players")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchDetailsPlayersAbilityUpgrade", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.WebApi.MatchDetailsPlayer", null)
                        .WithMany("AbilityUpgrades")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchHistory", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.ProMetadata.League", null)
                        .WithMany("MatchHistories")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchHistoryPlayer", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.WebApi.MatchHistory", null)
                        .WithMany("Players")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyDraft", b =>
                {
                    b.Navigation("DraftPickPlayers");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyLeague", b =>
                {
                    b.Navigation("FantasyDrafts");

                    b.Navigation("FantasyLeagueWeight")
                        .IsRequired();

                    b.Navigation("FantasyPlayers");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Fantasy.FantasyMatch", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadata", b =>
                {
                    b.Navigation("MatchTips");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataPlayer", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Kills");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GameCoordinator.GcMatchMetadataTeam", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.ProMetadata.League", b =>
                {
                    b.Navigation("FantasyLeagues");

                    b.Navigation("MatchDetails");

                    b.Navigation("MatchHistories");

                    b.Navigation("MatchMetadatas");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchDetail", b =>
                {
                    b.Navigation("PicksBans");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchDetailsPlayer", b =>
                {
                    b.Navigation("AbilityUpgrades");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.WebApi.MatchHistory", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
