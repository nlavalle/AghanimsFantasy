// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using DataAccessLibrary.Data;

#nullable disable

namespace csharp_ef_webapi.Migrations
{
    [DbContext(typeof(AghanimsFantasyContext))]
    [Migration("20240216062618_FantasyLeagueRefactor")]
    partial class FantasyLeagueRefactor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("nadcl")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SteamKit2.GC.Dota.Internal.CMsgDOTAMatch", b =>
                {
                    b.Property<decimal>("match_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("average_skill")
                        .HasColumnType("bigint");

                    b.Property<long>("cluster")
                        .HasColumnType("bigint");

                    b.Property<long>("dire_guild_id")
                        .HasColumnType("bigint");

                    b.Property<long>("dire_team_complete")
                        .HasColumnType("bigint");

                    b.Property<long>("dire_team_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("dire_team_logo")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("dire_team_logo_url")
                        .HasColumnType("text");

                    b.Property<string>("dire_team_name")
                        .HasColumnType("text");

                    b.Property<long>("dire_team_score")
                        .HasColumnType("bigint");

                    b.Property<string>("dire_team_tag")
                        .HasColumnType("text");

                    b.Property<long>("duration")
                        .HasColumnType("bigint");

                    b.Property<long>("engine")
                        .HasColumnType("bigint");

                    b.Property<long>("first_blood_time")
                        .HasColumnType("bigint");

                    b.Property<float>("game_balance")
                        .HasColumnType("real");

                    b.Property<int>("game_mode")
                        .HasColumnType("integer");

                    b.Property<long>("human_players")
                        .HasColumnType("bigint");

                    b.Property<long>("leagueid")
                        .HasColumnType("bigint");

                    b.Property<long>("lobby_type")
                        .HasColumnType("bigint");

                    b.Property<long>("match_flags")
                        .HasColumnType("bigint");

                    b.Property<int>("match_outcome")
                        .HasColumnType("integer");

                    b.Property<decimal>("match_seq_num")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("pre_game_duration")
                        .HasColumnType("bigint");

                    b.Property<long>("private_metadata_key")
                        .HasColumnType("bigint");

                    b.Property<long>("radiant_guild_id")
                        .HasColumnType("bigint");

                    b.Property<long>("radiant_team_complete")
                        .HasColumnType("bigint");

                    b.Property<long>("radiant_team_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("radiant_team_logo")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("radiant_team_logo_url")
                        .HasColumnType("text");

                    b.Property<string>("radiant_team_name")
                        .HasColumnType("text");

                    b.Property<long>("radiant_team_score")
                        .HasColumnType("bigint");

                    b.Property<string>("radiant_team_tag")
                        .HasColumnType("text");

                    b.Property<long>("replay_salt")
                        .HasColumnType("bigint");

                    b.Property<int>("replay_state")
                        .HasColumnType("integer");

                    b.Property<long>("series_id")
                        .HasColumnType("bigint");

                    b.Property<long>("series_type")
                        .HasColumnType("bigint");

                    b.Property<long>("server_ip")
                        .HasColumnType("bigint");

                    b.Property<long>("server_port")
                        .HasColumnType("bigint");

                    b.Property<long>("starttime")
                        .HasColumnType("bigint");

                    b.Property<long>("tournament_id")
                        .HasColumnType("bigint");

                    b.Property<long>("tournament_round")
                        .HasColumnType("bigint");

                    b.HasKey("match_id");

                    b.ToTable("gc_dota_matches", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SteamProfilePicture")
                        .HasColumnType("text")
                        .HasColumnName("steam_profile_picture");

                    b.HasKey("Id");

                    b.ToTable("dota_accounts", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.BalanceLedger", b =>
                {
                    b.Property<long>("DiscordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DiscordId"));

                    b.Property<long>("Tokens")
                        .HasColumnType("bigint")
                        .HasColumnName("tokens");

                    b.HasKey("DiscordId");

                    b.ToTable("balance_ledger", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.BetStreak", b =>
                {
                    b.Property<string>("discordName")
                        .HasColumnType("text")
                        .HasColumnName("discord_name");

                    b.Property<long>("bet_streak")
                        .HasColumnType("bigint")
                        .HasColumnName("streak");

                    b.HasKey("discordName");

                    b.ToTable("bets_streaks", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Bromance", b =>
                {
                    b.Property<string>("bro1Name")
                        .HasColumnType("text")
                        .HasColumnName("bro_1_name");

                    b.Property<string>("bro2Name")
                        .HasColumnType("text")
                        .HasColumnName("bro_2_name");

                    b.Property<int>("totalMatches")
                        .HasColumnType("integer")
                        .HasColumnName("total_matches");

                    b.Property<int>("totalWins")
                        .HasColumnType("integer")
                        .HasColumnName("total_wins");

                    b.HasKey("bro1Name", "bro2Name");

                    b.ToTable("bromance_last_60", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.DiscordIds", b =>
                {
                    b.Property<long>("DiscordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("discord_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DiscordId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("DiscordName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discord_name");

                    b.Property<long>("SteamId")
                        .HasColumnType("bigint")
                        .HasColumnName("steam_id");

                    b.HasKey("DiscordId");

                    b.ToTable("discord_ids", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyDraft", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("DiscordAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_account_id");

                    b.Property<DateTime?>("DraftCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("draft_created");

                    b.Property<DateTime?>("DraftLastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("draft_last_updated");

                    b.Property<int>("FantasyLeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy_league_id");

                    b.HasKey("Id");

                    b.HasIndex("FantasyLeagueId");

                    b.ToTable("dota_fantasy_drafts", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyDraftPlayer", b =>
                {
                    b.Property<long?>("FantasyPlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("fantasy_player_id");

                    b.Property<long>("FantasyDraftId")
                        .HasColumnType("bigint")
                        .HasColumnName("fantasy_draft_id");

                    b.Property<int>("DraftOrder")
                        .HasColumnType("integer")
                        .HasColumnName("draft_order");

                    b.HasKey("FantasyPlayerId", "FantasyDraftId");

                    b.HasIndex("FantasyDraftId");

                    b.ToTable("dota_fantasy_draft_players", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyLeague", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("FantasyDraftLocked")
                        .HasColumnType("bigint")
                        .HasColumnName("fantasy_draft_locked_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<long>("LeagueEndTime")
                        .HasColumnType("bigint")
                        .HasColumnName("league_end_time");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("league_id");

                    b.Property<long>("LeagueStartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("league_start_time");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("league_name");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("dota_fantasy_leagues", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DotaAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("dota_account_id");

                    b.Property<int>("FantasyLeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy_league_id");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("DotaAccountId");

                    b.HasIndex("FantasyLeagueId");

                    b.HasIndex("TeamId");

                    b.ToTable("dota_fantasy_players", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadata", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("LobbyId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("lobby_id");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<long>("PrimaryEventId")
                        .HasColumnType("bigint")
                        .HasColumnName("primary_event_id");

                    b.Property<decimal>("ReportUntilTime")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("report_until_time");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("dota_gc_match_metadata", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadataItemPurchase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("GcMatchMetadataPlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long>("PurchaseTime")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_time");

                    b.HasKey("Id");

                    b.HasIndex("GcMatchMetadataPlayerId");

                    b.ToTable("dota_gc_match_metadata_itempurchase", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadataPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<List<int>>("AbilityUpgrades")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<long>("AegisSnatched")
                        .HasColumnType("bigint")
                        .HasColumnName("aegis_snatched");

                    b.Property<long>("AvgAssistsX16")
                        .HasColumnType("bigint")
                        .HasColumnName("avg_assists_x16");

                    b.Property<long>("AvgDeathsX16")
                        .HasColumnType("bigint")
                        .HasColumnName("avg_deaths_x16");

                    b.Property<long>("AvgGpmX16")
                        .HasColumnType("bigint")
                        .HasColumnName("avg_gpm_x16");

                    b.Property<long>("AvgKillsX16")
                        .HasColumnType("bigint")
                        .HasColumnName("avg_kills_x16");

                    b.Property<bool>("AvgStatsCalibrated")
                        .HasColumnType("boolean")
                        .HasColumnName("avg_stats_calibrated");

                    b.Property<long>("AvgXpmX16")
                        .HasColumnType("bigint")
                        .HasColumnName("avg_xpm_x16");

                    b.Property<long>("BestAssistsX16")
                        .HasColumnType("bigint")
                        .HasColumnName("best_assists_x16");

                    b.Property<long>("BestGpmX16")
                        .HasColumnType("bigint")
                        .HasColumnName("best_gpm_x16");

                    b.Property<long>("BestKillsX16")
                        .HasColumnType("bigint")
                        .HasColumnName("best_kills_x16");

                    b.Property<long>("BestWinStreak")
                        .HasColumnType("bigint")
                        .HasColumnName("best_win_streak");

                    b.Property<long>("BestXpmX16")
                        .HasColumnType("bigint")
                        .HasColumnName("best_xpm_x16");

                    b.Property<long>("CampsStacked")
                        .HasColumnType("bigint")
                        .HasColumnName("camps_stacked");

                    b.Property<long>("CouriersKilled")
                        .HasColumnType("bigint")
                        .HasColumnName("couriers_killed");

                    b.Property<float>("FarmScore")
                        .HasColumnType("real")
                        .HasColumnName("farm_score");

                    b.Property<long>("FeaturedHeroStickerIndex")
                        .HasColumnType("bigint")
                        .HasColumnName("featured_hero_sticker_index");

                    b.Property<long>("FeaturedHeroStickerQuality")
                        .HasColumnType("bigint")
                        .HasColumnName("featured_hero_sticker_quality");

                    b.Property<float>("FightScore")
                        .HasColumnType("real")
                        .HasColumnName("fight_score");

                    b.Property<int>("GamePlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("game_player_id");

                    b.Property<long?>("GcMatchMetadataTeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("HeroXp")
                        .HasColumnType("bigint")
                        .HasColumnName("hero_xp");

                    b.Property<long>("LaneSelectionFlags")
                        .HasColumnType("bigint")
                        .HasColumnName("lane_selection_flags");

                    b.Property<long>("NetworthRank")
                        .HasColumnType("bigint")
                        .HasColumnName("net_worth_rank");

                    b.Property<long>("ObserverWardsPlaced")
                        .HasColumnType("bigint")
                        .HasColumnName("observer_wards_placed");

                    b.Property<long>("PlayerSlot")
                        .HasColumnType("bigint")
                        .HasColumnName("player_slot");

                    b.Property<float>("PushScore")
                        .HasColumnType("real")
                        .HasColumnName("push_score");

                    b.Property<long>("Rampages")
                        .HasColumnType("bigint")
                        .HasColumnName("rampages");

                    b.Property<long>("RapiersPurchased")
                        .HasColumnType("bigint")
                        .HasColumnName("rapiers_purchased");

                    b.Property<long>("SentryWardsPlaced")
                        .HasColumnType("bigint")
                        .HasColumnName("sentry_wards_placed");

                    b.Property<float>("StunDuration")
                        .HasColumnType("real")
                        .HasColumnName("stun_duration");

                    b.Property<long>("SupportGoldSpent")
                        .HasColumnType("bigint")
                        .HasColumnName("support_gold_spent");

                    b.Property<float>("SupportScore")
                        .HasColumnType("real")
                        .HasColumnName("support_score");

                    b.Property<long>("TeamSlot")
                        .HasColumnType("bigint")
                        .HasColumnName("team_slot");

                    b.Property<long>("TripleKills")
                        .HasColumnType("bigint")
                        .HasColumnName("triple_kills");

                    b.Property<long>("WardsDewarded")
                        .HasColumnType("bigint")
                        .HasColumnName("wards_dewarded");

                    b.Property<long>("WinStreak")
                        .HasColumnType("bigint")
                        .HasColumnName("win_streak");

                    b.HasKey("Id");

                    b.HasIndex("GcMatchMetadataTeamId");

                    b.ToTable("dota_gc_match_metadata_player", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadataPlayerKill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<long?>("GcMatchMetadataPlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("VictimSlot")
                        .HasColumnType("bigint")
                        .HasColumnName("victim_slot");

                    b.HasKey("Id");

                    b.HasIndex("GcMatchMetadataPlayerId");

                    b.ToTable("dota_gc_match_metadata_playerkill", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadataTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CmCaptainPlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("cm_captain_player_id");

                    b.Property<bool>("CmFirstPick")
                        .HasColumnType("boolean")
                        .HasColumnName("cm_first_pick");

                    b.Property<long>("CmPenalty")
                        .HasColumnType("bigint")
                        .HasColumnName("cm_penalty");

                    b.Property<long>("DotaTeam")
                        .HasColumnType("bigint")
                        .HasColumnName("dota_team");

                    b.Property<long?>("GcMatchMetadataId")
                        .HasColumnType("bigint");

                    b.Property<List<float>>("GraphExperience")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<List<float>>("GraphGoldEarned")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<List<float>>("GraphNetworth")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.HasKey("Id");

                    b.HasIndex("GcMatchMetadataId");

                    b.ToTable("dota_gc_match_metadata_team", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadataTip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("GcMatchMetadataId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourcePlayerSlot")
                        .HasColumnType("bigint")
                        .HasColumnName("source_player_slot");

                    b.Property<long>("TargetPlayerSlot")
                        .HasColumnType("bigint")
                        .HasColumnName("target_player_slot");

                    b.Property<long>("TipAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("tip_amount");

                    b.HasKey("Id");

                    b.HasIndex("GcMatchMetadataId");

                    b.ToTable("dota_gc_match_metadata_tip", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Hero", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("dota_heroes", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("league_name");

                    b.HasKey("Id");

                    b.ToTable("dota_leagues", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchDetail", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MatchId"));

                    b.Property<int>("BarracksStatusDire")
                        .HasColumnType("integer")
                        .HasColumnName("barracks_status_dire");

                    b.Property<int>("BarracksStatusRadiant")
                        .HasColumnType("integer")
                        .HasColumnName("barracks_status_radiant");

                    b.Property<int>("Cluster")
                        .HasColumnType("integer")
                        .HasColumnName("cluster");

                    b.Property<int>("DireScore")
                        .HasColumnType("integer")
                        .HasColumnName("dire_score");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int>("Engine")
                        .HasColumnType("integer")
                        .HasColumnName("engine");

                    b.Property<int>("FirstBloodTime")
                        .HasColumnType("integer")
                        .HasColumnName("first_blood_time");

                    b.Property<int>("Flags")
                        .HasColumnType("integer")
                        .HasColumnName("flags");

                    b.Property<int>("GameMode")
                        .HasColumnType("integer")
                        .HasColumnName("game_mode");

                    b.Property<int>("HumanPlayers")
                        .HasColumnType("integer")
                        .HasColumnName("human_players");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("league_id");

                    b.Property<int>("LobbyType")
                        .HasColumnType("integer")
                        .HasColumnName("lobby_type");

                    b.Property<long>("MatchSeqNum")
                        .HasColumnType("bigint")
                        .HasColumnName("match_seq_num");

                    b.Property<int>("PreGameDuration")
                        .HasColumnType("integer")
                        .HasColumnName("pre_game_duration");

                    b.Property<int>("RadiantScore")
                        .HasColumnType("integer")
                        .HasColumnName("radiant_score");

                    b.Property<bool>("RadiantWin")
                        .HasColumnType("boolean")
                        .HasColumnName("radiant_win");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("start_time");

                    b.Property<int>("TowerStatusDire")
                        .HasColumnType("integer")
                        .HasColumnName("tower_status_dire");

                    b.Property<int>("TowerStatusRadiant")
                        .HasColumnType("integer")
                        .HasColumnName("tower_status_radiant");

                    b.HasKey("MatchId");

                    b.HasIndex("LeagueId");

                    b.ToTable("dota_match_details", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchDetailsPicksBans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HeroId")
                        .HasColumnType("integer")
                        .HasColumnName("hero_id");

                    b.Property<bool>("IsPick")
                        .HasColumnType("boolean")
                        .HasColumnName("is_pick");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("Team")
                        .HasColumnType("integer")
                        .HasColumnName("team");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("dota_match_details_picks_bans", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchDetailsPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<int?>("AghanimsScepter")
                        .HasColumnType("integer")
                        .HasColumnName("aghanims_scepter");

                    b.Property<int?>("AghanimsShard")
                        .HasColumnType("integer")
                        .HasColumnName("aghanims_shard");

                    b.Property<int?>("Assists")
                        .HasColumnType("integer")
                        .HasColumnName("assists");

                    b.Property<int?>("Backpack0")
                        .HasColumnType("integer")
                        .HasColumnName("backpack_0");

                    b.Property<int?>("Backpack1")
                        .HasColumnType("integer")
                        .HasColumnName("backpack_1");

                    b.Property<int?>("Backpack2")
                        .HasColumnType("integer")
                        .HasColumnName("backpack_2");

                    b.Property<int?>("Deaths")
                        .HasColumnType("integer")
                        .HasColumnName("deaths");

                    b.Property<int?>("Denies")
                        .HasColumnType("integer")
                        .HasColumnName("denies");

                    b.Property<int?>("Gold")
                        .HasColumnType("integer")
                        .HasColumnName("gold");

                    b.Property<int?>("GoldPerMin")
                        .HasColumnType("integer")
                        .HasColumnName("gold_per_min");

                    b.Property<int?>("GoldSpent")
                        .HasColumnType("integer")
                        .HasColumnName("gold_spent");

                    b.Property<int?>("HeroDamage")
                        .HasColumnType("integer")
                        .HasColumnName("hero_damage");

                    b.Property<int?>("HeroHealing")
                        .HasColumnType("integer")
                        .HasColumnName("hero_healing");

                    b.Property<int>("HeroId")
                        .HasColumnType("integer")
                        .HasColumnName("hero_id");

                    b.Property<int?>("Item0")
                        .HasColumnType("integer")
                        .HasColumnName("item_0");

                    b.Property<int?>("Item1")
                        .HasColumnType("integer")
                        .HasColumnName("item_1");

                    b.Property<int?>("Item2")
                        .HasColumnType("integer")
                        .HasColumnName("item_2");

                    b.Property<int?>("Item3")
                        .HasColumnType("integer")
                        .HasColumnName("item_3");

                    b.Property<int?>("Item4")
                        .HasColumnType("integer")
                        .HasColumnName("item_4");

                    b.Property<int?>("Item5")
                        .HasColumnType("integer")
                        .HasColumnName("item_5");

                    b.Property<int?>("ItemNeutral")
                        .HasColumnType("integer")
                        .HasColumnName("item_neutral");

                    b.Property<int?>("Kills")
                        .HasColumnType("integer")
                        .HasColumnName("kills");

                    b.Property<int?>("LastHits")
                        .HasColumnType("integer")
                        .HasColumnName("last_hits");

                    b.Property<int?>("LeaverStatus")
                        .HasColumnType("integer")
                        .HasColumnName("leaver_status");

                    b.Property<int?>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<int?>("Moonshard")
                        .HasColumnType("integer")
                        .HasColumnName("moonshard");

                    b.Property<long?>("Networth")
                        .HasColumnType("bigint")
                        .HasColumnName("net_worth");

                    b.Property<int>("PlayerSlot")
                        .HasColumnType("integer")
                        .HasColumnName("player_slot");

                    b.Property<int?>("ScaledHeroDamage")
                        .HasColumnType("integer")
                        .HasColumnName("scaled_hero_damage");

                    b.Property<int?>("ScaledHeroHealing")
                        .HasColumnType("integer")
                        .HasColumnName("scaled_hero_healing");

                    b.Property<int?>("ScaledTowerDamage")
                        .HasColumnType("integer")
                        .HasColumnName("scaled_tower_damage");

                    b.Property<int?>("TeamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("team_number");

                    b.Property<int?>("TeamSlot")
                        .HasColumnType("integer")
                        .HasColumnName("team_slot");

                    b.Property<int?>("TowerDamage")
                        .HasColumnType("integer")
                        .HasColumnName("tower_damage");

                    b.Property<int?>("XpPerMin")
                        .HasColumnType("integer")
                        .HasColumnName("xp_per_min");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("dota_match_details_players", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchDetailsPlayersAbilityUpgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Ability")
                        .HasColumnType("integer")
                        .HasColumnName("ability");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<int>("Time")
                        .HasColumnType("integer")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("dota_match_details_players_ability_upgrades", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchHistory", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MatchId"));

                    b.Property<long>("DireTeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("dire_team_id");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("league_id");

                    b.Property<int>("LobbyType")
                        .HasColumnType("integer")
                        .HasColumnName("lobby_type");

                    b.Property<long>("MatchSeqNum")
                        .HasColumnType("bigint")
                        .HasColumnName("match_seq_num");

                    b.Property<long>("RadiantTeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("radiant_team_id");

                    b.Property<int>("SeriesId")
                        .HasColumnType("integer")
                        .HasColumnName("series_id");

                    b.Property<int>("SeriesType")
                        .HasColumnType("integer")
                        .HasColumnName("series_type");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("start_time");

                    b.HasKey("MatchId");

                    b.HasIndex("LeagueId");

                    b.ToTable("dota_match_history", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchHistoryPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<int>("HeroId")
                        .HasColumnType("integer")
                        .HasColumnName("hero_id");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<int>("PlayerSlot")
                        .HasColumnType("integer")
                        .HasColumnName("player_slot");

                    b.Property<int>("TeamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("team_number");

                    b.Property<int>("TeamSlot")
                        .HasColumnType("integer")
                        .HasColumnName("team_slot");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("dota_match_history_players", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchStatus", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MatchId"));

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("MatchId");

                    b.ToTable("match_status", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchStreak", b =>
                {
                    b.Property<string>("discordName")
                        .HasColumnType("text")
                        .HasColumnName("discord_name");

                    b.Property<long>("match_streak")
                        .HasColumnType("bigint")
                        .HasColumnName("streak");

                    b.HasKey("discordName");

                    b.ToTable("matches_streaks", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.PlayerMatchDetails", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("match_id");

                    b.Property<int>("PlayerSlot")
                        .HasColumnType("integer")
                        .HasColumnName("player_slot");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<int?>("AghanimsScepter")
                        .HasColumnType("integer")
                        .HasColumnName("aghanims_scepter");

                    b.Property<int?>("AghanimsShard")
                        .HasColumnType("integer")
                        .HasColumnName("aghanims_shard");

                    b.Property<int?>("Assists")
                        .HasColumnType("integer")
                        .HasColumnName("assists");

                    b.Property<int?>("Backpack0")
                        .HasColumnType("integer")
                        .HasColumnName("backpack_0");

                    b.Property<int?>("Backpack1")
                        .HasColumnType("integer")
                        .HasColumnName("backpack_1");

                    b.Property<int?>("Backpack2")
                        .HasColumnType("integer")
                        .HasColumnName("backpack_2");

                    b.Property<int?>("Deaths")
                        .HasColumnType("integer")
                        .HasColumnName("deaths");

                    b.Property<int?>("Denies")
                        .HasColumnType("integer")
                        .HasColumnName("denies");

                    b.Property<int?>("Gold")
                        .HasColumnType("integer")
                        .HasColumnName("gold");

                    b.Property<int?>("GoldPerMin")
                        .HasColumnType("integer")
                        .HasColumnName("gold_per_min");

                    b.Property<int?>("GoldSpent")
                        .HasColumnType("integer")
                        .HasColumnName("gold_spent");

                    b.Property<int?>("HeroDamage")
                        .HasColumnType("integer")
                        .HasColumnName("hero_damage");

                    b.Property<int?>("HeroHealing")
                        .HasColumnType("integer")
                        .HasColumnName("hero_healing");

                    b.Property<int>("HeroId")
                        .HasColumnType("integer")
                        .HasColumnName("hero_id");

                    b.Property<int?>("Item0")
                        .HasColumnType("integer")
                        .HasColumnName("item_0");

                    b.Property<int?>("Item1")
                        .HasColumnType("integer")
                        .HasColumnName("item_1");

                    b.Property<int?>("Item2")
                        .HasColumnType("integer")
                        .HasColumnName("item_2");

                    b.Property<int?>("Item3")
                        .HasColumnType("integer")
                        .HasColumnName("item_3");

                    b.Property<int?>("Item4")
                        .HasColumnType("integer")
                        .HasColumnName("item_4");

                    b.Property<int?>("Item5")
                        .HasColumnType("integer")
                        .HasColumnName("item_5");

                    b.Property<int?>("ItemNeutral")
                        .HasColumnType("integer")
                        .HasColumnName("item_neutral");

                    b.Property<int?>("Kills")
                        .HasColumnType("integer")
                        .HasColumnName("kills");

                    b.Property<int?>("LastHits")
                        .HasColumnType("integer")
                        .HasColumnName("last_hits");

                    b.Property<int?>("LeaverStatus")
                        .HasColumnType("integer")
                        .HasColumnName("leaver_status");

                    b.Property<int?>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int?>("Moonshard")
                        .HasColumnType("integer")
                        .HasColumnName("moonshard");

                    b.Property<long?>("Networth")
                        .HasColumnType("bigint")
                        .HasColumnName("net_worth");

                    b.Property<int?>("ScaledHeroDamage")
                        .HasColumnType("integer")
                        .HasColumnName("scaled_hero_damage");

                    b.Property<int?>("ScaledHeroHealing")
                        .HasColumnType("integer")
                        .HasColumnName("scaled_hero_healing");

                    b.Property<int?>("ScaledTowerDamage")
                        .HasColumnType("integer")
                        .HasColumnName("scaled_tower_damage");

                    b.Property<int?>("TeamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("team_number");

                    b.Property<int?>("TeamSlot")
                        .HasColumnType("integer")
                        .HasColumnName("team_slot");

                    b.Property<int?>("TowerDamage")
                        .HasColumnType("integer")
                        .HasColumnName("tower_damage");

                    b.Property<int?>("XpPerMin")
                        .HasColumnType("integer")
                        .HasColumnName("xp_per_min");

                    b.HasKey("MatchId", "PlayerSlot");

                    b.ToTable("player_match_details", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text")
                        .HasColumnName("abbreviation");

                    b.Property<long>("AdminAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("admin_account_id");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("games_played");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("LogoSponsor")
                        .HasColumnType("text")
                        .HasColumnName("logo_sponsor");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Player0AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_0_account_id");

                    b.Property<long>("Player1AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_1_account_id");

                    b.Property<long>("Player2AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_2_account_id");

                    b.Property<long>("Player3AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_3_account_id");

                    b.Property<long>("Player4AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_4_account_id");

                    b.Property<long>("Player5AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_5_account_id");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("bigint")
                        .HasColumnName("time_created");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("dota_teams", "nadcl");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyDraft", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.FantasyLeague", null)
                        .WithMany("FantasyDrafts")
                        .HasForeignKey("FantasyLeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyDraftPlayer", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.FantasyDraft", null)
                        .WithMany("DraftPickPlayers")
                        .HasForeignKey("FantasyDraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("csharp_ef_webapi.Models.FantasyPlayer", "FantasyPlayer")
                        .WithMany()
                        .HasForeignKey("FantasyPlayerId")
                        .IsRequired();

                    b.Navigation("FantasyPlayer");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyLeague", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.League", null)
                        .WithMany("FantasyLeagues")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyPlayer", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.Account", "DotaAccount")
                        .WithMany()
                        .HasForeignKey("DotaAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("csharp_ef_webapi.Models.FantasyLeague", "FantasyLeague")
                        .WithMany("FantasyPlayers")
                        .HasForeignKey("FantasyLeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("csharp_ef_webapi.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("DotaAccount");

                    b.Navigation("FantasyLeague");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadata", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.MatchDetail", "MatchDetail")
                        .WithOne("MatchMetadata")
                        .HasForeignKey("csharp_ef_webapi.Models.GcMatchMetadata", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchDetail");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadataItemPurchase", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.GcMatchMetadataPlayer", null)
                        .WithMany("Items")
                        .HasForeignKey("GcMatchMetadataPlayerId");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadataPlayer", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.GcMatchMetadataTeam", null)
                        .WithMany("Players")
                        .HasForeignKey("GcMatchMetadataTeamId");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadataPlayerKill", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.GcMatchMetadataPlayer", null)
                        .WithMany("Kills")
                        .HasForeignKey("GcMatchMetadataPlayerId");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadataTeam", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.GcMatchMetadata", null)
                        .WithMany("Teams")
                        .HasForeignKey("GcMatchMetadataId");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadataTip", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.GcMatchMetadata", null)
                        .WithMany("MatchTips")
                        .HasForeignKey("GcMatchMetadataId");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchDetail", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.League", "League")
                        .WithMany("MatchDetails")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchDetailsPicksBans", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.MatchDetail", null)
                        .WithMany("PicksBans")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchDetailsPlayer", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.MatchDetail", null)
                        .WithMany("Players")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchDetailsPlayersAbilityUpgrade", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.MatchDetailsPlayer", null)
                        .WithMany("AbilityUpgrades")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchHistory", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.League", null)
                        .WithMany("MatchHistories")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchHistoryPlayer", b =>
                {
                    b.HasOne("csharp_ef_webapi.Models.MatchHistory", null)
                        .WithMany("Players")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyDraft", b =>
                {
                    b.Navigation("DraftPickPlayers");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.FantasyLeague", b =>
                {
                    b.Navigation("FantasyDrafts");

                    b.Navigation("FantasyPlayers");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadata", b =>
                {
                    b.Navigation("MatchTips");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadataPlayer", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Kills");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.GcMatchMetadataTeam", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.League", b =>
                {
                    b.Navigation("FantasyLeagues");

                    b.Navigation("MatchDetails");

                    b.Navigation("MatchHistories");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchDetail", b =>
                {
                    b.Navigation("MatchMetadata");

                    b.Navigation("PicksBans");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchDetailsPlayer", b =>
                {
                    b.Navigation("AbilityUpgrades");
                });

            modelBuilder.Entity("csharp_ef_webapi.Models.MatchHistory", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
